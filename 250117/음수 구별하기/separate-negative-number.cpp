// // <if 조건문>

// // 문제를 풀다보면 특정 조건에 해당하는 경우에만 코드를 수행하고 싶은 경우가 생김: if문
// // 조건을 만족하는 경우에만 if 내부에 있는 코드를 수행하게 됨
// if (조건) {
  
//   여기에 조건이 참일 경우에만 수행되는 코드 작성

// }

// // if 내부 라는 범위(scope)를 명확히 정의하기 위해 c++ 에서는 중괄호 블록 { } 을 사용
// // 즉, if문을 사용하게 되면 if조건을 만족할 때, 해당 블록 내부에 있는 코드만을 실행하게 됨
// // 아래 코드에서 if문의 블록 { } 안에 존재하는 cout은 a > 10이라는 조건을 만족하는 경우에만 실행됨
// // 반면 가장 마지막 줄에 있는 cout은 if문의 블록 { } 바깥에 존재하고, if와 같은 위계에 놓여있기 때문에, if 조건과 상관없이 항상 실행됨

// #include <iostream>
// using namespace std;

// int main() {

//     int a;
//     cin >> a;

//     if (a > 10) {
//         a += 5;
//         cout << a << endl;
//         a -= 6;
//     }

//     cout << a;
//     return 0;
// }

// // 만약 { } 블록을 쓰지 않는다면 어떻게 될까?
// // 이럴 경우, if조건 다음에 나오는 오직 한 줄의 코드만 if조건에 의해 실행됨
// // 따라서 다음 두 코드는 같은 코드임
// if (a > 10) {
//     a += 5;
// }
// if (a > 10)
//     a += 5;

// // 하지만 아래 두 코드는 다른 코드
// // { } 블록이 없는 두번째 코드의 경우, a+=5 한줄만 if 조건에 의해 실행되며 a-= 6은 if조건과 관계없이 실행됨
// if (a > 10) {
//     a += 5;
//     a -= 6;
// }
// if (a > 10)
//     a += 5;
//     a -= 6;

// // <비교 연산자>
// // if문에 조건을 넣기 위해 다음의 여러 비교 연산자들을 사용할 수 있음
// 1. a > b : a가 b보다 큰 경우에만 true / 아니면 false
// 2. a >= b : a가 b보다 같거나 큰 경우에만 true / 아니면 false
// 3. a < b : a가 b보다 작은 경우에만 true / 아니면 false
// 4. a <= b : a가 b보다 같거나 작은 경우에만 true / 아니면 false
// 5. a == b : a와 b가 동일한 경우에만 true / 아니면 false
// 6. a != b : a와 b가 다른 경우에만 true / 아니면 false
// // 같거나 큰, 혹은 같거나 작은 연산의 경우 등호 =의 위치가 항상 비교연산 뒤에 나와야만 함에 주의
// // 또, 두 원소가 일치하는지는 꼭 =문자 2개를 사용해야만 함을 기억
// // 이때 == 기호는 값 뿐만이 아니라 type도 일치해야 하기 때문에 1 == '1'은 false가 됨

// // SIDE NOTE
// // 정수 a가 짝수인지 판별하기 위한 조건문
// // 다음과 같이 % 연산을 사용해 2로 나눈 나머지가 0인지를 비교하여 판단할 수 있음
// // 홀수인 경우에는 2로 나눈 나머지가 1인지를 판단하면 됨
// int a;
// cin >> a;

// if (a % 2 == 0) {
//     cout << "even";
// }
// // 이처럼 % 연산을 이용하면 a가 n의 배수인지를 n으로 나눈 나머지가 0인지로 쉽게 판단 가능
// int a;
// cin << a;

// if (a % 5 == 0) {
//     cout << "multiple of 5";
// }

// <문제: 음수 구별하기>

#include <iostream>
using namespace std;

int main() {
    int n;

    cin >> n;
    cout << n;

    if (n < 0) {
        cout << endl << "minus";
    }

    return 0;
}