# # 대소문자 변환

# # 대문자 x가 주어졌을 때, 이를 소문자로 바꿔주는 코드 작성하기

# # 아스키코드 값: 'A'가 65, 'a'가 97 *****

# # 방법 1: 아스키 코드 활용하기
# # 아스키 코드는 연속하기 때문에 대문자가 알파벳 순서상 0번부터 시작했을 때 몇 번째인지를 먼저 구함
# x = 'C'
# ord(x) # -> 65
# ord(x) - ord('A') # -> 2 (67 - 65)

# # 이 순서를 그대로 유지하며 소문자가 되도록 변경해주기 위해서는,
# # 먼저 소문자 'a'에 해당하는 아스키 번호를 더해 원하는 소문자의 아스키 번호를 구한 뒤, 이를 다시 chr를 이용하여 문자로 변경하면 됨
# x = 'C'
# ord(x) # -> 67
# ord(x) - ord('A') # -> 2 (67 - 65)
# ord(x) - ord('A') + ord('a') # -> 99 (2 + 97)
# chr(ord(x) - ord('A') + ord('a')) # -> 'c'

# # 방법 2: BUT python에서는 lower() 함수를 제공함
# # lower() 함수: 특정 문자열의 모든 문자들을 전부 소문자로 변경해줌
# x = 'C'
# print(x.lower())
# # >> 'c'

# # 소문자를 대문자로 변경하는 것도 위 방법의 역과정을 거치면 됨
# # upper() 함수: 특정 문자열의 모든 문자들을 전부 대문자로 변경해줌


# # 그 다음 알파벳 구하기
# # 만약 알파벳 x가 주어졌을 때, 그 다음 알파벳을 구해야 한다면, 이는 아스키 코드를 알아야만 해결 가능
# # 알파벳은 전부 연속한 아스키 코드로 이루어져 있으므로 66번째 아스키코드와 대응되는 문자는 'B'
# # x가 'A'라 했을 때 ord('A')를 하여 65 값을 얻어내고, 이 값에 1을 더한 값은 66을 다시 chr 함수로 묶어주면 'B' 값을 얻을 수 있음
# x = 'A'
# ord(x) # -> 65
# ord(x) + 1 # -> 66
# chr(ord(x) + 1) # -> 'B'

# # 따라서 알파벳 x 다음 알파벳을 구하는 것은 chr(ord(x) + 1)로 표현 가능
# x = input()
# print(ord(x))
# print(ord(x) + 1)
# print(chr(ord(x) + 1))
# # >> A
# # 65
# # 66
# # B


# # 문자 x가 대문자인지는 if문을 이용하여 쉽게 구현 가능
# # 문자열끼리는 비교가 가능하며, 아스키 코드 번호 순으로 비교가 되기 때문에 다음 코드로 대문자 여부를 판단할 수 있음
# x = 'B'
# if 'A' <= x and x <= 'Z':
#     print("Upper case")

# # 소문자도 마찬가지로 판단 가능

# # isalpha() 함수: x가 알파벳인지에 대한 여부 알려주는 python 제공 함수 - 문자열이 전부 알파벳일 경우 True
# # isdigit() 함수: x가 숫자인지에 대한 여부 알려주는 python 제공 함수 - 문자열(?)이 전부 숫자일 경우 True
# "a".isalpha() # True
# "ab".isalpha() # True
# "ab3".isalpha() # False <- 전부 알파벳이어야만 True
# "1".isdigit() # True
# "12".isdigit() # True
# "12a".isdigit() # False <- 전부 숫자여야만 True


# 문제

given_str = input()

for elem in given_str:
    if elem.isalpha() == True:
        print(elem.upper(), end="")

# // 처음에 elem.isalpha라 했는데 elem.isalpha()라 해야 함 & 처음에 upper(elem)이라 했는데 elem.upper()라 해야 함 ***